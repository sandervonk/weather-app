/* ------------------------------------------------------------------------------ */
/* - Â© 2023 Sander Vonk | Requires permission for replication or commercial use - */
/* ------------------------------------------------------------------------------ */

/* ------------------------------------------------------------------------------ */
/* -------------- WEATHER APP WORKSHOP | MVHacks 2023 | 06/15/2023 -------------- */
/* ------------------------------------------------------------------------------ */
/* ---------------------- This file will contain our styles --------------------- */
/* ------------------------------------------------------------------------------ */

/* 
    CSS uses selectors to target the HTML elements we want to style.
    - Selectors can be tags, classes, ids, or attributes.
    - Selectors can be combined to target specific elements.
    - Selectors can be nested to target elements within elements.
    - Some common selectors and examples are:
        selector                    example
        ----------------------------------------------
        tag                         p
        .class                      .button-green
        #id                         #main-title
        [attribute=value]           [type="text"]
        :pseudo-class               :hover
        ::pseudo-element            ::before, ::after
        :root                       N/A (Root of DOM)
        *                           N/A (Wildcard)
    - We can combine selectors to target specific, or multiple, elements, for the same style
        purpose                syntax                example
        -----------------------------------------------------------------------
        apply to multiple      selector, selector    p, .button-green
        child of parent        parent > child        .container > p
        next sibling           sibling + sibling     h1 + p
        all siblings           sibling ~ sibling     h1 ~ p

    CSS also uses properties to style our HTML elements.
    - These are the actual styles we want to apply to our HTML elements.
    - They have values that are assigned to each property.
    - Some common properties and example values are:
        property                    value
        -----------------------------------------------------------------

        COLOR
        -----------------------------------------------------------------
        color                       red, #000, rgb(0,0,0)
        background-color            red, #000, rgb(0,0,0)

        TEXT
        -----------------------------------------------------------------
        font-size                   16px, 1rem, 1em
        font-family                 Arial, Helvetica, sans-serif
        font-weight                 bold, 400, 700
        text-align                  left, center, right
        text-decoration             underline, line-through, none

        BORDERS & SHADOWS
        -----------------------------------------------------------------
        border                      1px solid red
        border-color                red, #000, rgb(0,0,0)
        border-radius               5px, 50%
        box-shadow                  0 0 5px 0 rgba(0,0,0,0.5)

        SIZING
        -----------------------------------------------------------------
        width                       100px, 100%, auto
        height                      100px, 100%, auto
        max-width                   100px, 100%, auto
        max-height                  100px, 100%, auto
        box-sizing                  border-box, content-box

        LAYOUT
        -----------------------------------------------------------------
        margin                      10px, 10px 20px, 10px 20px 30px 40px
        padding                     10px, 10px 20px, 10px 20px 30px 40px
  
    CSS is styled in the manner:
    
        selector {
            property1: value1;
            property2: var(--variable-name);
        }

    Here's an example of a CSS rule:
        p {
            color: red;
            font-size: 16px;
        }


    CSS also has a concept of specificity, which determines which styles
    will be applied to an element when multiple styles are applied to it.
    - Specificity is determined by the number of selectors and the type of
      selectors used.
    - The more selectors, the more specific the style is.
    - The more specific the style, the higher its priority.
    - The higher the priority, the more likely it is to be applied.
    - If two styles have the same specificity, the one that comes last in
        the CSS file will be applied.
    - We can use "!important" after a value to make it override all other
        styles, but this should be used sparingly, and is not recommended as 
        part of the best practices
    - Here's an example of a CSS rule using "!important":
        p {
            color: red !important; <-- this takes priority, even if other styles are more specific
            font-size: 16px;
        }
        body > div.main > p.label + span {
            color: blue;
        }

    NOTE: the utils.css file already has some pre-written classes and 
      selectors for common styles that we'll need for this project. The
      theme.css file also has some pre-set theme colors, mostly used for
      @svonk/util toasts/popups, but we can use them here too if we like.
*/

/* Fix user stylesheet so that the content fills the page */
html,
body {
  height: 100%;
  width: 100%;
  margin: 0;
  padding: 0;
  overflow: hidden;
}

* {
  box-sizing: border-box;
  transform-origin: center;
}

/* Import fonts for util.css and development */
@import url("https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&family=Poppins:wght@400;500;600;700&family=Montserrat:wght@400;700&family=Roboto:wght@400;500;700&display=swap");

/* ---------------------------------------------------------------------------- */
/* -------------------------   [ START CODE BELOW ]   ------------------------- */
/* ---------------------------------------------------------------------------- */

/* Let's pick some colors for the background and elements to use later */
:root {
  --card-bg: #ffffff29;
  --temp-bg: #ffffffaa;
  --card-solid: #ffffff;
  --bg-appx: #1b88bf;
  --color-text: white;
  --color-sat: 100%;

  /* EDIT BELOW FOR STEP 8 */
  --page-bg: radial-gradient(circle, #3ab7f7 0%, #2ba0db 45%, #0d72a6 100%); /* <-- for Step 8, you can change this if you like */
}

/* for STEP 15's night style */
body.dark {
    --page-bg: radial-gradient(circle, #2c2d2e 0%, #1d1f20 45%, #060708 100%); 
    --color-sat: 0%;
}



/* 
   STEP 8: Styling the body
   ----------------------------------------------------------------------------
   
   Let's make the page look a little nicer using the variable we just created 

   Variables are used as properties in the format var(--variable-name)

   Try using the variable to set the background color of the body.
*/
body {
  background: /* [ CHANGE THIS FOR STEP 8 ] */;
}

/* 
   STEP 9: Fixing what shows during loading
   ----------------------------------------------------------------------------
   
   When the page is loading, we see the empty #forecast_cards_row. However, we 
   want to instead have it say "Loading..." we can do this with the :empty 
   pseudo-class. 
   
   Try adding a style for the #forecast_card_row when it is empty with the 
   property "content" set to "Loading Forecast...". (this property is a little special, 
   only working with the :before and :after pseudo-elements, so we'll add it 
   to the :before pseudo-element)

   Change the blanks, including the ...s, to make it work.
*/

#forecast_card_row:/* ... */::/* ... */ {
  /* [ ADD THE PROPERTY FROM STEP 9 ] */
}/* 



/* ------------------------------------------------------------------------------ */
/* --------------------------  [ DO NOT CHANGE BELOW ]  ------------------------- */
/* ------------------------------------------------------------------------------ */
/* -----------------  You can mess with it once you're done :) ------------------ */
/* ------------------------------------------------------------------------------ */

:root {
    --anim-in: 0.25s;
    --anim-out: .5s;
}


/* main page formatting */
body, main {
    height: 100%;
    display: flex;
    flex-flow: column;
    align-items: stretch;
    justify-content: stretch;
}
main {
    align-items: stretch;
    justify-content: flex-end;
}
#forecast {
    display: flex;
    flex-flow: column;
}
#forecast_card_row:empty {
    display: flex;
    align-items: center;
    justify-content: center;
    height: 240px;
    font-size: 1.5rem;
    font-weight: 600;
    font-family: "Montserrat", Roboto, sans-serif;
    color: var(--color-text);
    opacity: 0.5;
}
/* overflow scroll for cards */
#forecast_card_row {
    overflow-x: auto;
    align-items: center;
    justify-content: flex-start;
    position: relative;
    padding: 10px;
}

#forecast_card_row > .forecast_card {
    /* sizing */
    margin: 10px;
    padding: 10px;
    padding-bottom: calc(1.5rem + 35px);
    width: 200px;
    height: 200px;
    flex-shrink: 0;
    flex-grow: 0;

    /* text */
    color: var(--color-text);
    font-weight: 600;
    font-family: "Montserrat", Roboto, sans-serif;
    text-align: center;

    /* general styles */
    border-radius: 10px;
    cursor: pointer;

    /* container properties */
    display: flex;
    flex-flow: column;
    justify-content: space-between;
    position: relative;
    overflow: hidden;

    /* background - glass effect */
    background: hsla(200, var(--color-sat), 81%, 0.12);
    border: 1px solid hsla(200, var(--color-sat), 81%, 0.29);
    box-shadow: 0 4px 30px hsla(0, 0%, 0%, 0.1);
    backdrop-filter: blur(5px);
    -webkit-backdrop-filter: blur(5px);

    /* transition */
    transition: background-color ease-out, border-color ease-out, transform ease-out;
    transition-duration: var(--anim-out);
}

#forecast_card_row > .forecast_card:hover {
    /* bluer glassmorphism */
    background: var(--card-bg);
    border: 1px solid hsla(0, 0%, 100%, 0.26);

    /* transform */
    transform: scale(1.05);
    transition-duration: var(--anim-in);
}

#forecast_card_row > .forecast_card > .forecast_card__icon {
    /* sizing */
    width: 100%;
    object-fit: contain;
    aspect-ratio: 3 / 2;
    margin-bottom: -15px;

    /* events */
    pointer-events: none;
    user-select: none;
    filter: none;
    
    /* zoom effect */
    transition: transform ease-out, filter ease-out;
    transition-duration: var(--anim-out);
    transform: scale(0.9);
}

#forecast_card_row > .forecast_card:hover > .forecast_card__icon {
    transform: scale(1.0) rotate(3deg);
    transition-duration: var(--anim-in);
}

body.dark #forecast_card_row > .forecast_card:not(:hover) > .forecast_card__icon {
    filter: saturate(0.7);
}

#forecast_card_row > .forecast_card p {
    /* layout */
    margin: 0;
    padding: 0;

    /* events */
    pointer-events: none;
    user-select: none;
}
#forecast_card_row > .forecast_card p.forecast_card__temp {
    /* glassmorphism effect */
    background: hsla(200, var(--color-sat), 81%, 0.12);
    box-shadow: 0 4px 30px hsla(0, 0%, 0%, 0.1);
    backdrop-filter: blur(6.6px);
    -webkit-backdrop-filter: blur(6.6px);
    border: 1px solid hsla(200, var(--color-sat), 81%, 0.29);
    
    /* text formatting */
    color: var(--color-text);
    font-size: 1.5rem;
    line-height: 1.5rem;
    font-weight: 700;

    /* size and position */
    position: absolute;
    bottom: 0;
    left: 0;
    margin: 10px;
    padding: 6px 10px ;
    border-radius: 7px;
    
}

/* header */
body > header {
    /* text */
    color: var(--color-text);
    font-size: 1.5rem;
    font-weight: 600;
    font-family: Lato, Montserrat, "Open Sans", sans-serif;
    

    /* sizing */
    height: 5rem;
    padding: 10px;
    width: 100%;

    /* glassmorphism effect */

    background: hsla(200, var(--color-sat), 81%, 0.12);
    box-shadow: 0 4px 30px hsla(0, 0%, 0%, 0.1);
    backdrop-filter: blur(6.6px);
    -webkit-backdrop-filter: blur(6.6px);
    border-bottom: 1px solid hsla(200, var(--color-sat), 81%, 0.29);

    /* layout */
    display: flex;
    flex-flow: row nowrap;
    align-items: stretch;
    justify-content: stretch;
    z-index: 1;
}

/* header contents */

body > header > div {
    /* layout */
    display: flex;
    align-items: center;
    justify-content: center;
    flex-grow: 1;
    height: 100%;
}

body > header > div.header_text {
    flex-grow: 3;
}
body > header > div.header_search {
    max-width: 250px;
    padding: 0.25rem;
    position: relative;
}
body > header .header_search_input {
    /* layout */
    width: 100%;
    height: 100%;
    padding: 0 1.25rem;
    padding-right: 2.75rem;
    max-width: unset;
    outline: none;

    /* glassmorphism */
    border-radius: 10px;
    box-shadow: 0 4px 30px hsla(0, 0%, 0%, 0.1);
    backdrop-filter: blur(6.6px);
    -webkit-backdrop-filter: blur(6.6px);
    background: var(--card-bg);
    border: 1px solid hsla(0, 0%, 100%, 0.26);

    /* text */
    color: #ffffffcc;
    font-size: .75em;
    font-weight: 600;
    font-family: Lato, Montserrat, "Open Sans", sans-serif;
}

body > header .header_search_input::placeholder {
    color: #ffffff40;
}

body > header > .header_search > #city_submit {
    /* position and size */
    position: absolute;
    top: .75rem;
    right: .75rem;
    height: 1.75rem;
    width: 1.75rem;

    /* general style */
    border-radius: 5px;
    background-image: url(/img/submit.png);
    background-image: url(/img/submit.svg);
    background-size: 1rem;
    background-position: center;
    background-repeat: no-repeat;

    /* glassmorphism */
    background-color: hsla(202, var(--color-sat), 98%, 0.39);
    backdrop-filter: blur(8.3px);
    -webkit-backdrop-filter: blur(8.3px);
    border: 1px solid hsla(202, var(--color-sat), 98%, 0.59);
}

/* weather text */

#current_weather {
    padding: 20px;
    font-weight: 600;
    font-family: "Montserrat", Roboto, sans-serif;

    /* center */
    display: flex;
    flex-flow: column;
    align-items: center;
    justify-content: center;
}
#forecast {
    height: 100%;
}
#forecast  #current_text {
    color: white;
    font-size: 1.25em;
    text-align: center;
}
.temp_text::after {
    content: "Â°F";
}

#current_min_temp::before {
    content: "ê ";
}
#current_max_temp::before {
    content: "ê ";
}
#current_icon {
    width: 100%;
    max-width: 450px;
    max-height: 300px;
    margin: 0 auto;
    display: block;
}

/* small screens */
@media (max-width: 450px) {
    body > header > div.header_text {
        display: none;
    }
    body > header > div.header_search {
        max-width: unset;
        width: 100%;
    }
}